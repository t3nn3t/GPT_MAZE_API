INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (1,3) -> (0,3) ; (3,0) -> (3,1) ; (1,1) -> (2,1) ; (2,1) -> (1,1) ; (1,1) -> (1,2) ; (0,0) -> (1,0) ; (3,1) -> (3,2) ; (2,3) -> (2,2) ; (3,2) -> (2,2) ; (3,0) -> (2,0) ; (3,1) -> (3,0) ; (0,3) -> (1,3) ; (0,0) -> (0,1) ; (1,0) -> (0,0) ; (1,2) -> (1,1) ; (2,2) -> (2,3) ; (2,0) -> (3,0) ; (1,0) -> (2,0) ; (0,1) -> (0,0) ; (2,3) -> (1,3) ; (2,1) -> (2,0) ; (2,0) -> (2,1) ; (1,3) -> (2,3) ; (2,3) -> (3,3) ; (0,2) -> (1,2) ; (3,3) -> (2,3) ; (3,2) -> (3,1) ; (2,2) -> (3,2) ; (1,2) -> (0,2) ; (2,0) -> (1,0) <ADJLIST_END> <ORIGIN_START> (1,0) <ORIGIN_END> <TARGET_START> (2,3) <TARGET_END>

CORRECT RESPONSE:
start "(1,0)"

current position is (1,0)
target is (2,3)
legal moves are (1,0) -> (0,0), (1,0) -> (2,0)
best next move is "(2,0)"

current position is (2,0)
target is (2,3)
legal moves are (2,0) -> (3,0), (2,0) -> (2,1), (2,0) -> (1,0)
best next move is "(3,0)"

current position is (3,0)
target is (2,3)
legal moves are (3,0) -> (3,1), (3,0) -> (2,0)
best next move is "(3,1)"

current position is (3,1)
target is (2,3)
legal moves are (3,1) -> (3,2), (3,1) -> (3,0)
best next move is "(3,2)"

current position is (3,2)
target is (2,3)
legal moves are (3,2) -> (2,2), (3,2) -> (3,1)
best next move is "(2,2)"

current position is (2,2)
target is (2,3)
legal moves are (2,2) -> (2,3), (2,2) -> (3,2)
best next move is "(2,3)"

current position is (2,3)
target is (2,3)
End

Start (1,0), next move (2,0), next move (3,0), next move (3,1), next move (3,2), next move (2,2), next move (2,3), End (2,3)


INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (1,3) -> (0,3) ; (1,2) -> (1,3) ; (3,3) -> (3,2) ; (1,0) -> (2,0) ; (1,1) -> (1,0) ; (2,0) -> (1,0) ; (2,1) -> (2,0) ; (3,2) -> (3,3) ; (1,3) -> (1,2) ; (3,0) -> (3,1) ; (2,0) -> (2,1) ; (1,0) -> (0,0) ; (3,2) -> (3,1) ; (0,3) -> (1,3) ; (2,3) -> (1,3) ; (2,1) -> (2,2) ; (3,1) -> (3,2) ; (0,2) -> (1,2) ; (0,2) -> (0,1) ; (2,3) -> (2,2) ; (0,1) -> (0,2) ; (1,3) -> (2,3) ; (2,2) -> (2,3) ; (2,0) -> (3,0) ; (3,1) -> (3,0) ; (0,0) -> (1,0) ; (1,2) -> (0,2) ; (3,0) -> (2,0) ; (1,0) -> (1,1) ; (2,2) -> (2,1) <ADJLIST_END> <ORIGIN_START> (3,0) <ORIGIN_END> <TARGET_START> (1,0) <TARGET_END>

CORRECT RESPONSE:
start "(3,0)"

current position is (3,0)
target is (1,0)
legal moves are (3,0) -> (3,1), (3,0) -> (2,0)
best next move is "(2,0)"

current position is (2,0)
target is (1,0)
legal moves are (2,0) -> (1,0), (2,0) -> (2,1), (2,0) -> (3,0)
best next move is "(1,0)"

current position is (1,0)
target is (1,0)
End

Start (3,0), next move (2,0), next move (1,0) End (1,0)


INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (3,2) -> (3,3) ; (3,3) -> (3,2) ; (2,0) -> (2,1) ; (2,3) -> (1,3) ; (3,0) -> (3,1) ; (2,0) -> (3,0) ; (3,2) -> (3,1) ; (3,1) -> (3,2) ; (3,3) -> (2,3) ; (2,1) -> (2,0) ; (0,0) -> (0,1) ; (1,2) -> (2,2) ; (0,1) -> (0,0) ; (2,2) -> (3,2) ; (3,0) -> (2,0) ; (3,1) -> (3,0) ; (1,1) -> (1,0) ; (2,2) -> (1,2) ; (0,3) -> (1,3) ; (1,0) -> (1,1) ; (1,3) -> (2,3) ; (0,2) -> (0,1) ; (1,2) -> (1,1) ; (0,2) -> (0,3) ; (2,3) -> (3,3) ; (1,1) -> (1,2) ; (1,3) -> (0,3) ; (3,2) -> (2,2) ; (0,3) -> (0,2) ; (0,1) -> (0,2) <ADJLIST_END> <ORIGIN_START> (2,1) <ORIGIN_END> <TARGET_START> (1,1) <TARGET_END>

CORRECT RESPONSE:
start "(2,1)"

current position is (2,1)
target is (1,1)
legal moves are (2,1) -> (2,0)
best next move is "(2,0)"

current position is (2,0)
target is (1,1)
legal moves are (2,0) -> (2,1), (2,0) -> (3,0)
best next move is "(3,0)"

current position is (3,0)
target is (1,1)
legal moves are (3,0) -> (3,1), (3,0) -> (2,0)
best next move is "(3,1)"

current position is (3,1)
target is (1,1)
legal moves are (3,1) -> (3,2), (3,1) -> (3,0)
best next move is "(3,2)"

current position is (3,2)
target is (1,1)
legal moves are (3,2) -> (3,3), (3,2) -> (3,1), (3,2) -> (2,2)
best next move is "(2,2)"

current position is (2,2)
target is (1,1)
legal moves are (2,2) -> (3,2), (2,2) -> (1,2)
best next move is "(1,2)"

current position is (1,2)
target is (1,1)
legal moves are (1,2) -> (2,2), (1,2) -> (1,1)
best next move is "(1,1)"

current position is (1,1)
target is (1,1)
End

Start (2,1), next move (2,0), next move (3,0), next move (3,1), next move (3,2), next move (2,2), next move (1,2), next move (1,1), End (1,1)


INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (0,2) -> (0,3) ; (2,3) -> (2,2) ; (0,2) -> (0,1) ; (1,1) -> (2,1) ; (0,1) -> (0,2) ; (1,3) -> (1,2) ; (2,1) -> (1,1) ; (2,1) -> (2,0) ; (1,2) -> (0,2) ; (1,0) -> (2,0) ; (3,1) -> (3,0) ; (1,1) -> (0,1) ; (2,0) -> (2,1) ; (1,0) -> (0,0) ; (2,3) -> (1,3) ; (1,3) -> (2,3) ; (3,3) -> (3,2) ; (0,2) -> (1,2) ; (3,2) -> (3,1) ; (3,0) -> (2,0) ; (2,2) -> (2,3) ; (2,0) -> (3,0) ; (3,0) -> (3,1) ; (3,2) -> (3,3) ; (3,1) -> (3,2) ; (0,0) -> (1,0) ; (2,0) -> (1,0) ; (0,1) -> (1,1) ; (1,2) -> (1,3) ; (0,3) -> (0,2) <ADJLIST_END> <ORIGIN_START> (2,2) <ORIGIN_END> <TARGET_START> (2,0) <TARGET_END>

CORRECT RESPONSE:
start "(2,2)"

current position is (2,2)
target is (2,0)
legal moves are (2,2) -> (2,3)
best next move is "(2,3)"

current position is (2,3)
target is (2,0)
legal moves are (2,3) -> (1,3), (2,3) -> (1,3)
best next move is "(1,3)"

current position is (1,3)
target is (2,0)
legal moves are (1,3) -> (1,2), (1,3) -> (2,3)
best next move is "(1,2)"

current position is (1,2)
target is (2,0)
legal moves are (1,2) -> (0,2), (1,2) -> (1,3)
best next move is "(0,2)"

current position is (0,2)
target is (2,0)
legal moves are (0,2) -> (0,3), (0,2) -> (0,1), (0,2) -> (1,2)
best next move is "(0,1)"

current position is (0,1)
target is (2,0)
legal moves are (0,1) -> (0,2), (0,1) -> (1,1)
best next move is "(1,1)"

current position is (1,1)
target is (2,0)
legal moves are (1,1) -> (2,1), (1,1) -> (0,1)
best next move is "(2,1)"

current position is (2,1)
target is (2,0)
legal moves are (2,1) -> (1,1), (2,1) -> (2,0)
best next move is "(2,0)"

current position is (2,0)
target is (2,0)
End

Start (2,2), next move (2,3), next move (1,3), next move (1,2), next move (0,2), next move (0,1), next move (1,1), next move (2,1), next move (2,0), End (2,0)


INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (2,0) -> (1,0) ; (0,1) -> (0,2) ; (2,2) -> (2,3) ; (1,2) -> (1,3) ; (0,1) -> (1,1) ; (3,3) -> (3,2) ; (2,0) -> (2,1) ; (3,2) -> (3,1) ; (2,1) -> (3,1) ; (2,3) -> (2,2) ; (3,0) -> (2,0) ; (1,3) -> (2,3) ; (2,2) -> (3,2) ; (2,0) -> (3,0) ; (1,3) -> (1,2) ; (0,3) -> (0,2) ; (0,0) -> (1,0) ; (3,1) -> (2,1) ; (3,1) -> (3,2) ; (2,3) -> (1,3) ; (1,0) -> (2,0) ; (1,0) -> (0,0) ; (0,0) -> (0,1) ; (3,2) -> (2,2) ; (0,2) -> (0,1) ; (0,2) -> (0,3) ; (3,2) -> (3,3) ; (1,1) -> (0,1) ; (0,1) -> (0,0) ; (2,1) -> (2,0) <ADJLIST_END> <ORIGIN_START> (1,0) <ORIGIN_END> <TARGET_START> (2,1) <TARGET_END>

CORRECT RESPONSE:
start "(1,0)"

current position is (1,0)
target is (2,1)
legal moves are (1,0) -> (2,0), (1,0) -> (0,0)
best next move is "(2,0)"

current position is (2,0)
target is (2,1)
legal moves are (2,0) -> (1,0), (2,0) -> (2,1), (2,0) -> (3,0)
best next move is "(2,1)"

current position is (2,1)
target is (2,1)
End

Start (1,0), next move (2,0), next move (2,1), End (2,1)