INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (2,3) -> (2,4) ; (1,3) -> (0,3) ; (2,2) -> (2,3) ; (1,2) -> (1,1) ; (2,0) -> (3,0) ; (2,0) -> (2,1) ; (1,0) -> (0,0) ; (1,0) -> (1,1) ; (2,4) -> (2,3) ; (1,1) -> (1,0) ; (3,1) -> (3,2) ; (1,4) -> (2,4) ; (4,3) -> (3,3) ; (2,2) -> (2,1) ; (1,1) -> (1,2) ; (0,1) -> (0,2) ; (4,4) -> (3,4) ; (1,4) -> (1,3) ; (3,0) -> (2,0) ; (0,2) -> (0,1) ; (3,3) -> (3,2) ; (0,1) -> (0,0) ; (4,1) -> (4,0) ; (0,3) -> (1,3) ; (4,2) -> (3,2) ; (4,0) -> (4,1) ; (0,0) -> (1,0) ; (2,1) -> (2,0) ; (0,3) -> (0,2) ; (1,3) -> (1,4) ; (3,2) -> (4,2) ; (3,2) -> (3,1) ; (3,4) -> (4,4) ; (2,1) -> (2,2) ; (4,2) -> (4,1) ; (1,4) -> (0,4) ; (3,0) -> (4,0) ; (4,0) -> (3,0) ; (0,0) -> (0,1) ; (2,3) -> (2,2) ; (3,3) -> (4,3) ; (0,4) -> (1,4) ; (2,4) -> (1,4) ; (3,2) -> (3,3) ; (4,4) -> (4,3) ; (0,2) -> (0,3) ; (4,1) -> (4,2) ; (4,3) -> (4,4) <ADJLIST_END> <ORIGIN_START> (0,3) <ORIGIN_END> <TARGET_START> (3,2) <TARGET_END>

CORRECT RESPONSE:
Start (0,3), next move (1,3), next move (1,4), next move (2,4), next move (2,3), next move (2,2), next move (2,1), next move (2,0), next move (3,0), next move (4,0), next move (4,1), next move (4,2), next move (3,2), End (3,2)