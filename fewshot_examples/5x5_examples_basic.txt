INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (1,0) -> (0,0) ; (1,4) -> (2,4) ; (2,2) -> (2,1) ; (2,1) -> (2,2) ; (1,1) -> (1,0) ; (3,2) -> (3,3) ; (1,0) -> (1,1) ; (0,1) -> (0,2) ; (4,1) -> (3,1) ; (1,4) -> (0,4) ; (4,1) -> (4,0) ; (4,4) -> (4,3) ; (3,4) -> (4,4) ; (3,3) -> (2,3) ; (2,2) -> (1,2) ; (4,2) -> (4,1) ; (1,2) -> (2,2) ; (3,3) -> (3,2) ; (1,0) -> (2,0) ; (4,3) -> (4,4) ; (1,1) -> (2,1) ; (0,4) -> (1,4) ; (0,0) -> (1,0) ; (0,2) -> (0,1) ; (2,4) -> (1,4) ; (2,3) -> (3,3) ; (2,0) -> (3,0) ; (1,3) -> (0,3) ; (1,2) -> (1,3) ; (0,4) -> (0,3) ; (4,1) -> (4,2) ; (4,0) -> (4,1) ; (3,1) -> (4,1) ; (0,0) -> (0,1) ; (0,3) -> (1,3) ; (4,3) -> (4,2) ; (4,0) -> (3,0) ; (1,3) -> (1,2) ; (3,0) -> (2,0) ; (0,3) -> (0,4) ; (3,0) -> (4,0) ; (2,3) -> (2,4) ; (2,0) -> (1,0) ; (2,4) -> (2,3) ; (2,1) -> (1,1) ; (4,4) -> (3,4) ; (4,2) -> (4,3) ; (0,1) -> (0,0) <ADJLIST_END> <ORIGIN_START> (0,1) <ORIGIN_END> <TARGET_START> (2,0) <TARGET_END>

CORRECT RESPONSE:
Start (0,1), next move (0,0), next move (1,0), next move (2,0), End (2,0)


INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (4,2) -> (4,1) ; (1,2) -> (1,1) ; (2,4) -> (3,4) ; (3,4) -> (2,4) ; (1,2) -> (2,2) ; (0,4) -> (1,4) ; (1,1) -> (0,1) ; (0,1) -> (1,1) ; (2,2) -> (2,1) ; (1,3) -> (0,3) ; (4,2) -> (4,3) ; (2,2) -> (3,2) ; (1,0) -> (0,0) ; (2,0) -> (3,0) ; (0,2) -> (0,3) ; (0,1) -> (0,0) ; (0,3) -> (1,3) ; (1,4) -> (2,4) ; (2,2) -> (1,2) ; (3,0) -> (4,0) ; (1,3) -> (2,3) ; (4,3) -> (4,2) ; (3,3) -> (3,4) ; (1,4) -> (0,4) ; (0,3) -> (0,2) ; (2,3) -> (1,3) ; (3,2) -> (2,2) ; (4,4) -> (3,4) ; (4,4) -> (4,3) ; (0,0) -> (0,1) ; (4,1) -> (3,1) ; (3,1) -> (4,1) ; (4,3) -> (4,4) ; (2,1) -> (3,1) ; (3,3) -> (2,3) ; (3,4) -> (4,4) ; (4,0) -> (3,0) ; (2,3) -> (3,3) ; (4,1) -> (4,2) ; (3,1) -> (2,1) ; (2,0) -> (1,0) ; (0,0) -> (1,0) ; (1,0) -> (2,0) ; (3,0) -> (2,0) ; (1,1) -> (1,2) ; (3,4) -> (3,3) ; (2,1) -> (2,2) ; (2,4) -> (1,4) <ADJLIST_END> <ORIGIN_START> (1,4) <ORIGIN_END> <TARGET_START> (0,2) <TARGET_END>

CORRECT RESPONSE:
Start (1,4), next move (2,4), next move (3,4), next move (3,3), next move (2,3), next move (1,3), next move (0,3), next move (0,2), End (0,2)


INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (4,4) -> (3,4) ; (3,4) -> (4,4) ; (0,0) -> (1,0) ; (3,3) -> (3,4) ; (0,1) -> (0,0) ; (2,2) -> (3,2) ; (0,1) -> (1,1) ; (3,4) -> (2,4) ; (3,3) -> (4,3) ; (0,4) -> (1,4) ; (0,3) -> (0,4) ; (4,2) -> (4,3) ; (1,0) -> (0,0) ; (4,0) -> (4,1) ; (1,3) -> (2,3) ; (4,1) -> (4,0) ; (1,1) -> (0,1) ; (2,1) -> (2,2) ; (3,1) -> (4,1) ; (2,4) -> (3,4) ; (1,3) -> (1,2) ; (3,4) -> (3,3) ; (1,4) -> (0,4) ; (3,2) -> (2,2) ; (1,4) -> (2,4) ; (2,4) -> (1,4) ; (1,1) -> (2,1) ; (2,0) -> (3,0) ; (3,0) -> (3,1) ; (4,1) -> (4,2) ; (4,1) -> (3,1) ; (0,4) -> (0,3) ; (0,2) -> (1,2) ; (1,2) -> (1,3) ; (4,3) -> (3,3) ; (0,2) -> (0,3) ; (2,2) -> (2,3) ; (3,1) -> (3,0) ; (2,1) -> (1,1) ; (2,3) -> (2,2) ; (3,0) -> (2,0) ; (0,3) -> (0,2) ; (0,0) -> (0,1) ; (4,3) -> (4,2) ; (1,2) -> (0,2) ; (2,2) -> (2,1) ; (4,2) -> (4,1) ; (2,3) -> (1,3) <ADJLIST_END> <ORIGIN_START> (3,0) <ORIGIN_END> <TARGET_START> (2,4) <TARGET_END>

CORRECT RESPONSE:
Start (3,0), next move (3,1), next move (4,1), next move (4,2), next move (4,3), next move (3,3), next move (3,4), next move (2,4), End (2,4)