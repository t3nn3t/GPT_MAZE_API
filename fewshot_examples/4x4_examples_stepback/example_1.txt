INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (1,3) -> (0,3) ; (3,0) -> (3,1) ; (1,1) -> (2,1) ; (2,1) -> (1,1) ; (1,1) -> (1,2) ; (0,0) -> (1,0) ; (3,1) -> (3,2) ; (2,3) -> (2,2) ; (3,2) -> (2,2) ; (3,0) -> (2,0) ; (3,1) -> (3,0) ; (0,3) -> (1,3) ; (0,0) -> (0,1) ; (1,0) -> (0,0) ; (1,2) -> (1,1) ; (2,2) -> (2,3) ; (2,0) -> (3,0) ; (1,0) -> (2,0) ; (0,1) -> (0,0) ; (2,3) -> (1,3) ; (2,1) -> (2,0) ; (2,0) -> (2,1) ; (1,3) -> (2,3) ; (2,3) -> (3,3) ; (0,2) -> (1,2) ; (3,3) -> (2,3) ; (3,2) -> (3,1) ; (2,2) -> (3,2) ; (1,2) -> (0,2) ; (2,0) -> (1,0) <ADJLIST_END> <ORIGIN_START> (1,0) <ORIGIN_END> <TARGET_START> (2,3) <TARGET_END>

CORRECT RESPONSE:
start "(1,0)"

current position is (1,0)
target is (2,3)
legal moves are (1,0) -> (0,0), (1,0) -> (2,0)
best next move is "(2,0)"

current position is (2,0)
target is (2,3)
legal moves are (2,0) -> (3,0), (2,0) -> (2,1), (2,0) -> (1,0)
best next move is "(3,0)"

current position is (3,0)
target is (2,3)
legal moves are (3,0) -> (3,1), (3,0) -> (2,0)
best next move is "(3,1)"

current position is (3,1)
target is (2,3)
legal moves are (3,1) -> (3,2), (3,1) -> (3,0)
best next move is "(3,2)"

current position is (3,2)
target is (2,3)
legal moves are (3,2) -> (2,2), (3,2) -> (3,1)
best next move is "(2,2)"

current position is (2,2)
target is (2,3)
legal moves are (2,2) -> (2,3), (2,2) -> (3,2)
best next move is "(2,3)"

current position is (2,3)
target is (2,3)
End
