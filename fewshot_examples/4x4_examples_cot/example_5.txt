INPUT: 
Below is an adjacency list of a maze, as well as the origin point and target point, output the moves to get from the origin point to the target point as efficiently as possible in full:<ADJLIST_START> (3,2) -> (3,3) ; (3,3) -> (3,2) ; (2,0) -> (2,1) ; (2,3) -> (1,3) ; (3,0) -> (3,1) ; (2,0) -> (3,0) ; (3,2) -> (3,1) ; (3,1) -> (3,2) ; (3,3) -> (2,3) ; (2,1) -> (2,0) ; (0,0) -> (0,1) ; (1,2) -> (2,2) ; (0,1) -> (0,0) ; (2,2) -> (3,2) ; (3,0) -> (2,0) ; (3,1) -> (3,0) ; (1,1) -> (1,0) ; (2,2) -> (1,2) ; (0,3) -> (1,3) ; (1,0) -> (1,1) ; (1,3) -> (2,3) ; (0,2) -> (0,1) ; (1,2) -> (1,1) ; (0,2) -> (0,3) ; (2,3) -> (3,3) ; (1,1) -> (1,2) ; (1,3) -> (0,3) ; (3,2) -> (2,2) ; (0,3) -> (0,2) ; (0,1) -> (0,2) <ADJLIST_END> <ORIGIN_START> (2,1) <ORIGIN_END> <TARGET_START> (1,1) <TARGET_END>

CORRECT RESPONSE:
Start (2,1), connection "(2,1) -> (2,0)" next move (2,0), connection "(2,0) -> (3,0)" next move (3,0), connection "(3,0) -> (3,1)" next move (3,1), connection "(3,1) -> (3,2)" next move (3,2), connection "(3,2) -> (2,2)" next move (2,2), connection "(2,2) -> (1,2)" next move (1,2), connection "(1,2) -> (1,1)" next move (1,1), End (1,1)